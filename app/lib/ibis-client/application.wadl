<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<application xmlns="http://wadl.dev.java.net/2009/02">
    <doc jersey:generatedBy="Jersey: 1.12 02/15/2012 04:51 PM" xmlns:jersey="http://jersey.java.net/"/>
    <resources base="https://localhost:8443/ibis/">
        <resource path="/api/v1/" className="IbisResource">
            <doc>
/**
 * Common methods for searching for objects in the Lookup/Ibis database.
 *
 * @author Dean Rasheed (dev-group@ucs.cam.ac.uk)
 */</doc>
            <resource path="last-transaction">
                <method id="getLastTransactionId" name="GET" resultField="value:long">
                    <doc>
    /**
     * Get the ID of the last (most recent) transaction.
     * &lt;p&gt;
     * A transaction represents an edit made to data in Lookup. Each
     * transaction is assigned a unique, sequential, numeric ID. Thus
     * this last transaction ID will increase each time some data in
     * Lookup is changed.
     *
     * @return The ID of the latest transaction.
     */</doc>
                    <response>
                        <representation mediaType="text/plain"/>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="version">
                <method id="getVersion" name="GET" resultField="value:String">
                    <doc>
    /**
     * Get the current API version number.
     *
     * @return The API version number string.
     */</doc>
                    <response>
                        <representation mediaType="text/plain"/>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
        </resource>
        <resource path="/api/v1/group/" className="GroupResource">
            <doc>
/**
 * Methods for querying and manipulating groups.
 *
 * &lt;h4&gt;The fetch parameter for groups&lt;/h4&gt;
 * &lt;p&gt;
 * All methods that return groups also accept an optional &lt;code&gt;fetch&lt;/code&gt;
 * parameter that may be used to request additional information about the
 * groups returned. For more details about the general rules that apply to
 * the &lt;code&gt;fetch&lt;/code&gt; parameter, refer to the {@link PersonMethods}
 * documentation.
 * &lt;p&gt;
 * For groups the &lt;code&gt;fetch&lt;/code&gt; parameter may be used to fetch references
 * to people, institutions or other groups. In each case, only non-cancelled
 * people, institutions and groups will be included when fetching references.
 * The following references are supported:
 * &lt;ul&gt;
 * &lt;li&gt;{@code "all_members"} - fetches all the people who are members of the
 * group, including members of groups included by the group, and groups
 * included by those groups, and so on.&lt;/li&gt;
 * &lt;li&gt;{@code "direct_members"} - fetches all the poeple who are direct
 * members of the group, not taking into account any included groups.&lt;/li&gt;
 * &lt;li&gt;{@code "members_of_inst"} - if the group is a membership group for an
 * institution, this fetches that institution.&lt;/li&gt;
 * &lt;li&gt;{@code "owning_insts"} - fetches all the institutions to which the
 * group belongs.&lt;/li&gt;
 * &lt;li&gt;{@code "manages_insts"} - fetches all the institutions that the group
 * manages. Typically this only applies to "Editor" groups.&lt;/li&gt;
 * &lt;li&gt;{@code "manages_groups"} - fetches all the groups that this group
 * manages. Note that some groups are self-managed, so this may be a
 * self-reference.&lt;/li&gt;
 * &lt;li&gt;{@code "managed_by_groups"} - fetches all the groups that manage this
 * group.&lt;/li&gt;
 * &lt;li&gt;{@code "reads_groups"} - fetches all the groups that this group has
 * privileged access to. This means that members of this group can see the
 * members of the referenced groups regardless of the membership visibility
 * settings.&lt;/li&gt;
 * &lt;li&gt;{@code "read_by_groups"} - fetches all the groups that have privileged
 * access to this group.&lt;/li&gt;
 * &lt;li&gt;{@code "includes_groups"} - fetches all the groups included by this
 * group.&lt;/li&gt;
 * &lt;li&gt;{@code "included_by_groups"} - fetches all the groups that include
 * this group.&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;p&gt;
 * As with person &lt;code&gt;fetch&lt;/code&gt; parameters, the references may be used
 * in a chain by using the "dot" notation to fetch additional information
 * about referenced people, institutions or groups. For example
 * {@code "all_members.email"} will fetch the email addresses of all members
 * of the group. For more information about what can be fetched from
 * referenced people and institutions, refer to the documentation for
 * {@link PersonMethods} and {@link InstitutionMethods}.
 *
 * @author Dean Rasheed (dev-group@ucs.cam.ac.uk)
 */</doc>
            <resource path="all-groups">
                <method id="allGroups" name="GET" resultField="groups:java.util.List&lt;IbisGroup&gt;">
                    <doc>
    /**
     * Return a list of all groups.
     * &lt;p&gt;
     * By default, only a few basic details about each group are returned,
     * but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used to fetch
     * additional attributes or references.
     *
     * @param includeCancelled [optional] Whether or not to include cancelled
     * groups. By default, only live groups are returned.
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch.
     *
     * @return The requested groups (in groupid order).
     */</doc>
                    <request>
                        <param name="includeCancelled" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="list">
                <method id="listGroups" name="GET" resultField="groups:java.util.List&lt;IbisGroup&gt;">
                    <doc>
    /**
     * Get the groups with the specified IDs or names.
     * &lt;p&gt;
     * By default, only a few basic details about each group are returned,
     * but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used to fetch
     * additional attributes or references.
     * &lt;p&gt;
     * The results are sorted by groupid.
     * &lt;p&gt;
     * NOTE: The URL path length is limited to around 8000 characters,
     * which limits the number of groups that this method can fetch. Group
     * IDs are currently 6 characters long, and must be comma separated and
     * URL encoded, which limits this method to around 800 groups by ID,
     * but probably fewer by name, depending on the group name lengths.
     * &lt;p&gt;
     * NOTE: The groups returned may include cancelled groups. It is the
     * caller's repsonsibility to check their cancelled flags.
     *
     * @param groupids [required] A comma-separated list of group IDs or
     * group names (may be a mix of both).
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch.
     *
     * @return The requested groups (in groupid order).
     */</doc>
                    <request>
                        <param name="groupids" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="modified-groups">
                <method id="modifiedGroups" name="GET" resultField="groups:java.util.List&lt;IbisGroup&gt;">
                    <doc>
    /**
     * Find all groups modified between the specified pair of transactions.
     * &lt;p&gt;
     * The transaction IDs specified should be the IDs from two different
     * requests for the last (most recent) transaction ID, made at different
     * times, that returned different values, indicating that some Lookup
     * data was modified in the period between the two requests. This method
     * then determines which (if any) groups were affected.
     * &lt;p&gt;
     * By default, only a few basic details about each group are returned,
     * but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used to fetch
     * additional attributes or references.
     * &lt;p&gt;
     * NOTE: All data returned reflects the latest available data about each
     * group. It is not possible to query for old data, or more detailed
     * information about the specific changes made.
     *
     * @param minTxId [required] Include modifications made in transactions
     * after (but not including) this one.
     * @param maxTxId [required] Include modifications made in transactions
     * up to and including this one.
     * @param groupids [optional] Only include groups with IDs or names in
     * this list. By default, all modified groups will be included.
     * @param includeCancelled  [optional] Include cancelled groups. By
     * default, cancelled groups are excluded.
     * @param membershipChanges [optional] Include groups whose members have
     * changed. By default, changes to group memberships are not taken into
     * consideration.
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch.
     *
     * @return The modified groups (in groupid order).
     */</doc>
                    <request>
                        <param name="minTxId" style="query" type="xs:long" javaType="long" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="maxTxId" style="query" type="xs:long" javaType="long" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="groupids" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="includeCancelled" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="membershipChanges" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="search">
                <method id="search" name="GET" resultField="groups:java.util.List&lt;IbisGroup&gt;">
                    <doc>
    /**
     * Search for groups using a free text query string. This is the same
     * search function that is used in the Lookup web application.
     * &lt;p&gt;
     * By default, only a few basic details about each group are returned,
     * but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used to fetch
     * additional attributes or references.
     * &lt;p&gt;
     * NOTE: If the query string starts with the prefix {@code "group:"}, it
     * is treated as an &lt;a href="/lql" target="_top"&gt;LQL query&lt;/a&gt;, allowing
     * more advanced searches. An LQL query will ignore the
     * &lt;code&gt;approxMatches&lt;/code&gt; parameter, but it will respect the value of
     * &lt;code&gt;includeCancelled&lt;/code&gt;. In addition, an LQL query will ignore
     * the &lt;code&gt;orderBy&lt;/code&gt; parameter, since LQL queries always return
     * results in ID order.
     *
     * @param query [required] The search string.
     * @param approxMatches [optional] Flag to enable more approximate
     * matching in the search, causing more results to be returned. Defaults
     * to {@code false}. This is ignored for LQL queries.
     * @param includeCancelled [optional] Flag to allow cancelled groups to
     * be included. Defaults to {@code false}.
     * @param offset [optional] The number of results to skip at the start
     * of the search. Defaults to 0.
     * @param limit [optional] The maximum number of results to return.
     * Defaults to 100.
     * @param orderBy [optional] The order in which to list the results.
     * This may be {@code "groupid"}, {@code "name"} (the default for non-LQL
     * queries) or {@code "title"}. This is ignored for LQL queries, which
     * always return results in groupid order.
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch.
     *
     * @return The matching groups.
     */</doc>
                    <request>
                        <param name="query" style="query" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="approxMatches" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="includeCancelled" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="offset" style="query" type="xs:int" javaType="int" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="limit" style="query" type="xs:int" javaType="int" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="orderBy" style="query" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="search-count">
                <method id="searchCount" name="GET" resultField="value:int">
                    <doc>
    /**
     * Count the number of groups that would be returned by a search using
     * a free text query string.
     * &lt;p&gt;
     * NOTE: If the query string starts with the prefix {@code "group:"}, it
     * is treated as an &lt;a href="/lql" target="_top"&gt;LQL query&lt;/a&gt;, allowing
     * more advanced searches. An LQL query will ignore the
     * &lt;code&gt;approxMatches&lt;/code&gt; parameter, but it will respect the value of
     * &lt;code&gt;includeCancelled&lt;/code&gt;.
     *
     * @param query [required] The search string.
     * @param approxMatches [optional] Flag to enable more approximate
     * matching in the search, causing more results to be returned. Defaults
     * to {@code false}. This is ignored for LQL queries.
     * @param includeCancelled [optional] Flag to allow cancelled groups to
     * be included. Defaults to {@code false}.
     *
     * @return The number of matching groups.
     */</doc>
                    <request>
                        <param name="query" style="query" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="approxMatches" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="includeCancelled" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="text/plain"/>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="{groupid}">
                <param name="groupid" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <method id="getGroup" name="GET" resultField="group:IbisGroup">
                    <doc>
    /**
     * Get the group with the specified ID or name.
     * &lt;p&gt;
     * By default, only a few basic details about the group are returned,
     * but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used to fetch
     * additional attributes or references of the group.
     * &lt;p&gt;
     * NOTE: The group returned may be a cancelled group. It is the caller's
     * repsonsibility to check its cancelled flag.
     *
     * @param groupid [required] The ID or name of the group to fetch. This
     * may be either the numeric ID or the short hyphenated group name (for
     * example {@code "100656"} or {@code "cs-editors"}).
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch.
     *
     * @return The requested group or {@code null} if it was not found.
     */</doc>
                    <request>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="{groupid}/cancelled-members">
                <param name="groupid" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <method id="getCancelledMembers" name="GET" resultField="people:java.util.List&lt;IbisPerson&gt;">
                    <doc>
    /**
     * Get all the cancelled members of the specified group, including
     * cancelled members of groups included by the group, and groups included
     * by those groups, and so on.
     * &lt;p&gt;
     * By default, only a few basic details about each member are returned,
     * but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used to fetch
     * additional attributes or references of each person.
     * &lt;p&gt;
     * NOTE: This method returns only cancelled people. It does not include
     * people who were removed from the group. Cancelled people are no longer
     * considered to be current staff, students or accredited visitors, and
     * are no longer regarded as belonging to any groups or institutions. The
     * list returned here reflects their group memberships just before they
     * were cancelled, and so is out-of-date data that should be used with
     * caution.
     *
     * @param groupid [required] The ID or name of the group.
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch for each person.
     *
     * @return The group's cancelled members (in identifier order).
     */</doc>
                    <request>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="{groupid}/direct-members">
                <param name="groupid" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <method id="getDirectMembers" name="GET" resultField="people:java.util.List&lt;IbisPerson&gt;">
                    <doc>
    /**
     * Get the direct members of the specified group, not including members
     * included via groups included by the group.
     * &lt;p&gt;
     * By default, only a few basic details about each member are returned,
     * but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used to fetch
     * additional attributes or references of each person.
     * &lt;p&gt;
     * NOTE: This method will not include cancelled people.
     *
     * @param groupid [required] The ID or name of the group.
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch for each person.
     *
     * @return The group's direct members (in identifier order).
     */</doc>
                    <request>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
                <method id="updateDirectMembers" name="PUT" resultField="people:java.util.List&lt;IbisPerson&gt;">
                    <doc>
    /**
     * Update the list of people who are direct members of the group. This
     * will not affect people who are included in the group due to the
     * inclusion of other groups.
     * &lt;p&gt;
     * Any non-cancelled people in the list of identifiers specified by
     * {@code addIds} will be added to the group. This list should be a
     * comma-separated list of identifiers, each of which may be either a
     * CRSid or an identifier from another identifier scheme, prefixed with
     * that scheme's name and a slash. For example {@code "mug99"} or
     * {@code "usn/123456789"}.
     * &lt;p&gt;
     * Any people in the list of identifiers specified by {@code removeIds}
     * will be removed from the group, except if they are also in the list
     * {@code addIds}. The special identifier {@code "all-members"} may be
     * used to remove all existing group members, replacing them with the
     * list specified by {@code newIds}.
     * &lt;p&gt;
     * &lt;h5&gt;Examples:&lt;/h5&gt;
     * &lt;pre&gt;
     * updateDirectMembers("test-group",
     *                     "mug99,crsid/yyy99,usn/123456789",
     *                     "xxx99",
     *                     "Remove xxx99 and add mug99, yyy99 and usn/123456789 to test-group");
     * &lt;/pre&gt;
     * &lt;pre&gt;
     * updateDirectMembers("test-group",
     *                     "xxx99,yyy99",
     *                     "all-members",
     *                     "Set the membership of test-group to include only xxx99 and yyy99");
     * &lt;/pre&gt;
     *
     * @param groupid [required] The ID or name of the group.
     * @param addIds [optional] The identifiers of people to add to the group.
     * @param removeIds [optional] The identifiers of people to remove from
     * the group.
     * @param commitComment [recommended] A short textual description of
     * the change made (will be visible on the history tab of the group and
     * all the affected people in the web application).
     *
     * @return The updated list of direct members of the group (in identifier
     * order).
     */</doc>
                    <request>
                        <representation mediaType="application/x-www-form-urlencoded">
                            <param name="addIds" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                            <param name="removeIds" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                            <param name="commitComment" style="query" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        </representation>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="{groupid}/members">
                <param name="groupid" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <method id="getMembers" name="GET" resultField="people:java.util.List&lt;IbisPerson&gt;">
                    <doc>
    /**
     * Get all the members of the specified group, including members of
     * groups included by the group, and groups included by those groups,
     * and so on.
     * &lt;p&gt;
     * By default, only a few basic details about each member are returned,
     * but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used to fetch
     * additional attributes or references of each person.
     * &lt;p&gt;
     * NOTE: This method will not include cancelled people.
     *
     * @param groupid [required] The ID or name of the group.
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch for each person.
     *
     * @return The group's members (in identifier order).
     */</doc>
                    <request>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
        </resource>
        <resource path="/api/v1/inst/" className="InstitutionResource">
            <doc>
/**
 * Methods for querying and manipulating institutions.
 *
 * &lt;h4&gt;The fetch parameter for institutions&lt;/h4&gt;
 * &lt;p&gt;
 * All methods that return institutions also accept an optional
 * &lt;code&gt;fetch&lt;/code&gt; parameter that may be used to request additional
 * information about the institutions returned. For more details about
 * the general rules that apply to the &lt;code&gt;fetch&lt;/code&gt; parameter,
 * refer to the {@link PersonMethods} documentation.
 * &lt;p&gt;
 * For institutions the &lt;code&gt;fetch&lt;/code&gt; parameter may be used to fetch
 * any institution attribute by specifying the &lt;code&gt;schemeid&lt;/code&gt; of an
 * institution attribute scheme. Examples include {@code "address"},
 * {@code "jpegPhoto"}, {@code "universityPhone"}, {@code "instPhone"},
 * {@code "landlinePhone"}, {@code "mobilePhone"}, {@code "faxNumber"},
 * {@code "email"} and {@code "labeledURI"}. The full list (which may be
 * extended over time) may be obtained using {@link #allAttributeSchemes}.
 * &lt;p&gt;
 * In addition the following pseudo-attributes are supported:
 * &lt;ul&gt;
 * &lt;li&gt;{@code "phone_numbers"} - fetches all phone numbers. This is
 * equivalent to
 * {@code "universityPhone,instPhone,landlinePhone,mobilePhone"}.&lt;/li&gt;
 * &lt;li&gt;{@code "all_attrs"} - fetches all attributes from all institution
 * attribute schemes. This does not include references.&lt;/li&gt;
 * &lt;li&gt;{@code "contact_rows"} - fetches all institution contact rows. Any
 * chained fetches from contact rows are used to fetch attributes from any
 * people referred to by the contact rows.&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;p&gt;
 * The &lt;code&gt;fetch&lt;/code&gt; parameter may also be used to fetch referenced
 * people, institutions or groups. This will only include references to
 * non-cancelled entities. The following references are supported:
 * &lt;ul&gt;
 * &lt;li&gt;{@code "all_members"} - fetches all the people who are members of the
 * institution.&lt;/li&gt;
 * &lt;li&gt;{@code "parent_insts"} - fetches all the parent institutions. Note
 * that currently all institutions have only one parent, but this may change
 * in the future, and client applications should be prepared to handle
 * multiple parents.&lt;/li&gt;
 * &lt;li&gt;{@code "child_insts"} - fetches all the child institutions.&lt;/li&gt;
 * &lt;li&gt;{@code "inst_groups"} - fetches all the groups that belong to the
 * institution.&lt;/li&gt;
 * &lt;li&gt;{@code "members_groups"} - fetches all the groups that form the
 * institution's membership list.&lt;/li&gt;
 * &lt;li&gt;{@code "managed_by_groups"} - fetches all the groups that manage the
 * institution's data (commonly called "Editor" groups).&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;p&gt;
 * As with person &lt;code&gt;fetch&lt;/code&gt; parameters, the references may be used
 * in a chain by using the "dot" notation to fetch additional information
 * about referenced people, institutions or groups. For example
 * {@code "all_members.email"} will fetch the email addresses of all members
 * of the institution. For more information about what can be fetched from
 * referenced people and groups, refer to the documentation for
 * {@link PersonMethods} and {@link GroupMethods}.
 *
 * @author Dean Rasheed (dev-group@ucs.cam.ac.uk)
 */</doc>
            <resource path="all-attr-schemes">
                <method id="allAttributeSchemes" name="GET" resultField="attributeSchemes:java.util.List&lt;IbisAttributeScheme&gt;">
                    <doc>
    /**
     * Return a list of all the institution attribute schemes available.
     * The {@code schemeid} values of these schemes may be used in the
     * &lt;code&gt;fetch&lt;/code&gt; parameter of other methods that return institutions.
     *
     * @return All the available institution attribute schemes (in precedence
     * order).
     */</doc>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="all-insts">
                <method id="allInsts" name="GET" resultField="institutions:java.util.List&lt;IbisInstitution&gt;">
                    <doc>
    /**
     * Return a list of all institutions.
     * &lt;p&gt;
     * By default, only a few basic details about each institution are
     * returned, but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used
     * to fetch additional attributes or references.
     *
     * @param includeCancelled [optional] Whether or not to include cancelled
     * institutions. By default, only live institutions are returned.
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch.
     *
     * @return The requested institutions (in instid order).
     */</doc>
                    <request>
                        <param name="includeCancelled" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="list">
                <method id="listInsts" name="GET" resultField="institutions:java.util.List&lt;IbisInstitution&gt;">
                    <doc>
    /**
     * Get the institutions with the specified IDs.
     * &lt;p&gt;
     * By default, only a few basic details about each institution are
     * returned, but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used
     * to fetch additional attributes or references.
     * &lt;p&gt;
     * The results are sorted by ID.
     * &lt;p&gt;
     * NOTE: The URL path length is limited to around 8000 characters, and
     * an instid is up to 8 characters long. Allowing for comma separators
     * and URL encoding, this limits the number of institutions that this
     * method may fetch to around 700.
     * &lt;p&gt;
     * NOTE: The institutions returned may include cancelled institutions.
     * It is the caller's repsonsibility to check their cancelled flags.
     *
     * @param instids [required] A comma-separated list of instids.
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch.
     *
     * @return The requested institutions (in instid order).
     */</doc>
                    <request>
                        <param name="instids" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="modified-insts">
                <method id="modifiedInsts" name="GET" resultField="institutions:java.util.List&lt;IbisInstitution&gt;">
                    <doc>
    /**
     * Find all institutions modified between the specified pair of
     * transactions.
     * &lt;p&gt;
     * The transaction IDs specified should be the IDs from two different
     * requests for the last (most recent) transaction ID, made at different
     * times, that returned different values, indicating that some Lookup
     * data was modified in the period between the two requests. This method
     * then determines which (if any) institutions were affected.
     * &lt;p&gt;
     * By default, only a few basic details about each institution are
     * returned, but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used
     * to fetch additional attributes or references.
     * &lt;p&gt;
     * NOTE: All data returned reflects the latest available data about each
     * institution. It is not possible to query for old data, or more
     * detailed information about the specific changes made.
     *
     * @param minTxId [required] Include modifications made in transactions
     * after (but not including) this one.
     * @param maxTxId [required] Include modifications made in transactions
     * up to and including this one.
     * @param instids [optional] Only include institutions with instids in
     * this list. By default, all modified institutions will be included.
     * @param includeCancelled  [optional] Include cancelled institutions. By
     * default, cancelled institutions are excluded.
     * @param contactRowChanges [optional] Include institutions whose contact
     * rows have changed. By default, changes to institution contact rows are
     * not taken into consideration.
     * @param membershipChanges [optional] Include institutions whose members
     * have changed. By default, changes to institutional memberships are not
     * taken into consideration.
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch.
     *
     * @return The modified institutions (in instid order).
     */</doc>
                    <request>
                        <param name="minTxId" style="query" type="xs:long" javaType="long" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="maxTxId" style="query" type="xs:long" javaType="long" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="instids" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="includeCancelled" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="contactRowChanges" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="membershipChanges" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="search">
                <method id="search" name="GET" resultField="institutions:java.util.List&lt;IbisInstitution&gt;">
                    <doc>
    /**
     * Search for institutions using a free text query string. This is the
     * same search function that is used in the Lookup web application.
     * &lt;p&gt;
     * By default, only a few basic details about each institution are
     * returned, but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used
     * to fetch additional attributes or references.
     * &lt;p&gt;
     * NOTE: If the query string starts with the prefix {@code "inst:"}, it
     * is treated as an &lt;a href="/lql" target="_top"&gt;LQL query&lt;/a&gt;, allowing
     * more advanced searches. An LQL query will ignore the
     * &lt;code&gt;approxMatches&lt;/code&gt; and &lt;code&gt;attributes&lt;/code&gt; parameters, but
     * it will respect the value of &lt;code&gt;includeCancelled&lt;/code&gt;. In
     * addition, an LQL query will ignore the &lt;code&gt;orderBy&lt;/code&gt; parameter,
     * since LQL queries always return results in ID order.
     *
     * @param query [required] The search string.
     * @param approxMatches [optional] Flag to enable more approximate
     * matching in the search, causing more results to be returned. Defaults
     * to {@code false}. This is ignored for LQL queries.
     * @param includeCancelled [optional] Flag to allow cancelled institutions
     * to be included. Defaults to {@code false}.
     * @param attributes [optional] A comma-separated list of attributes to
     * consider when searching. If this is {@code null} (the default) then
     * all attribute schemes marked as searchable will be included. This is
     * ignored for LQL queries.
     * @param offset [optional] The number of results to skip at the start
     * of the search. Defaults to 0.
     * @param limit [optional] The maximum number of results to return.
     * Defaults to 100.
     * @param orderBy [optional] The order in which to list the results.
     * This may be either {@code "instid"} or {@code "name"} (the default for
     * non-LQL queries). This is ignored for LQL queries, which always return
     * results in instid order.
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch.
     *
     * @return The matching institutions.
     */</doc>
                    <request>
                        <param name="query" style="query" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="approxMatches" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="includeCancelled" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="attributes" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="offset" style="query" type="xs:int" javaType="int" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="limit" style="query" type="xs:int" javaType="int" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="orderBy" style="query" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="search-count">
                <method id="searchCount" name="GET" resultField="value:int">
                    <doc>
    /**
     * Count the number of institutions that would be returned by a search
     * using a free text query string.
     * &lt;p&gt;
     * NOTE: If the query string starts with the prefix {@code "inst:"}, it
     * is treated as an &lt;a href="/lql" target="_top"&gt;LQL query&lt;/a&gt;, allowing
     * more advanced searches. An LQL query will ignore the
     * &lt;code&gt;approxMatches&lt;/code&gt; and &lt;code&gt;attributes&lt;/code&gt; parameters, but
     * it will respect the value of &lt;code&gt;includeCancelled&lt;/code&gt;.
     *
     * @param query [required] The search string.
     * @param approxMatches [optional] Flag to enable more approximate
     * matching in the search, causing more results to be returned. Defaults
     * to {@code false}. This is ignored for LQL queries.
     * @param includeCancelled [optional] Flag to allow cancelled institutions
     * to be included. Defaults to {@code false}.
     * @param attributes [optional] A comma-separated list of attributes to
     * consider when searching. If this is {@code null} (the default) then
     * all attribute schemes marked as searchable will be included. This is
     * ignored for LQL queries.
     *
     * @return The number of matching institutions.
     */</doc>
                    <request>
                        <param name="query" style="query" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="approxMatches" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="includeCancelled" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="attributes" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="text/plain"/>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="{instid}">
                <param name="instid" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <method id="getInst" name="GET" resultField="institution:IbisInstitution">
                    <doc>
    /**
     * Get the institution with the specified ID.
     * &lt;p&gt;
     * By default, only a few basic details about the institution are
     * returned, but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used
     * to fetch additional attributes or references of the institution.
     * &lt;p&gt;
     * NOTE: The institution returned may be a cancelled institution. It is
     * the caller's repsonsibility to check its cancelled flag.
     *
     * @param instid [required] The ID of the institution to fetch.
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch.
     *
     * @return The requested institution or {@code null} if it was not found.
     */</doc>
                    <request>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="{instid}/add-attribute">
                <param name="instid" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <method id="addAttribute" name="POST" resultField="attribute:IbisAttribute">
                    <doc>
    /**
     * Add an attribute to an institution. By default, this will not add the
     * attribute again if it already exists.
     * &lt;p&gt;
     * When adding an attribute, the new attribute's scheme must be set.
     * In addition, either its value or its binaryData field should be set.
     * All the remaining fields of the attribute are optional.
     *
     * @param instid [required] The ID of the institution.
     * @param attr [required] The new attribute to add.
     * @param position [optional] The position of the new attribute in the
     * list of attributes of the same attribute scheme (1, 2, 3,...). A value
     * of 0 (the default) will cause the new attribute to be added to the end
     * of the list of existing attributes for the scheme.
     * @param allowDuplicates [optional] If {@code true}, the new attribute
     * will always be added, even if another identical attribute already
     * exists. If {@code false} (the default), the new attribute will only be
     * added if it doesn't already exist.
     * @param commitComment [recommended] A short textual description of
     * the change made (will be visible on the history tab in the web
     * application).
     *
     * @return The newly created or existing attribute.
     */</doc>
                    <request>
                        <representation mediaType="application/x-www-form-urlencoded">
                            <param name="attr" style="query" type="xs:string" javaType="uk.ac.cam.ucs.ibis.dto.IbisAttribute" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                            <param name="position" style="query" type="xs:int" javaType="int" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                            <param name="allowDuplicates" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                            <param name="commitComment" style="query" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        </representation>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="{instid}/cancelled-members">
                <param name="instid" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <method id="getCancelledMembers" name="GET" resultField="people:java.util.List&lt;IbisPerson&gt;">
                    <doc>
    /**
     * Get all the cancelled members of the specified institution.
     * &lt;p&gt;
     * By default, only a few basic details about each member are returned,
     * but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used to fetch
     * additional attributes or references of each person.
     * &lt;p&gt;
     * NOTE: This method returns only cancelled people. It does not include
     * people who were removed from the institution. Cancelled people are no
     * longer considered to be current staff, students or accredited visitors,
     * and are no longer regarded as belonging to any groups or institutions.
     * The list returned here reflects their institutional memberships just
     * before they were cancelled, and so is out-of-date data that should be
     * used with caution.
     *
     * @param instid [required] The ID of the institution.
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch for each person.
     *
     * @return The institution's cancelled members (in identifier order).
     */</doc>
                    <request>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="{instid}/contact-rows">
                <param name="instid" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <method id="getContactRows" name="GET" resultField="institution.contactRows:java.util.List&lt;IbisContactRow&gt;">
                    <doc>
    /**
     * Get all the contact rows of the specified institution.
     * &lt;p&gt;
     * Any addresses, email addresses, phone numbers and web pages
     * associated with the contact rows are automatically returned, as
     * well as any people referred to by the contact rows.
     * &lt;p&gt;
     * If any of the contact rows refer to people, then only a few basic
     * details about each person are returned, but the optional
     * &lt;code&gt;fetch&lt;/code&gt; parameter may be used to fetch additional
     * attributes or references of each person.
     * &lt;p&gt;
     * NOTE: This method will not include cancelled people.
     *
     * @param instid [required] The ID of the institution.
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch for any people referred to by any
     * of the contact rows.
     *
     * @return The institution's contact rows.
     */</doc>
                    <request>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="{instid}/get-attributes">
                <param name="instid" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <method id="getAttributes" name="GET" resultField="attributes:java.util.List&lt;IbisAttribute&gt;">
                    <doc>
    /**
     * Get one or more (possibly multi-valued) attributes of an institution.
     * The returned attributes are sorted by attribute scheme precedence and
     * then attribute precedence.
     *
     * @param instid [required] The ID of the institution.
     * @param attrs [required] The attribute scheme(s) to fetch. This may
     * include any number of the attributes or pseudo-attributes, but it
     * may not include references or attribute chains (see the documentation
     * for the {@code fetch} parameter in this class).
     *
     * @return The requested attributes.
     */</doc>
                    <request>
                        <param name="attrs" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="{instid}/members">
                <param name="instid" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <method id="getMembers" name="GET" resultField="people:java.util.List&lt;IbisPerson&gt;">
                    <doc>
    /**
     * Get all the members of the specified institution.
     * &lt;p&gt;
     * By default, only a few basic details about each member are returned,
     * but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used to fetch
     * additional attributes or references of each person.
     * &lt;p&gt;
     * NOTE: This method will not include cancelled people.
     *
     * @param instid [required] The ID of the institution.
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch for each person.
     *
     * @return The institution's members (in identifier order).
     */</doc>
                    <request>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="{instid}/{attrid}">
                <param name="instid" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="attrid" style="template" type="xs:long" javaType="java.lang.Long" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <method id="deleteAttribute" name="DELETE" resultField="value:boolean">
                    <doc>
    /**
     * Delete an attribute of an institution. It is not an error if the
     * attribute does not exist.
     * &lt;p&gt;
     * Note that in this method, the &lt;code&gt;commitComment&lt;/code&gt; is passed
     * as a query parameter, rather than as a form parameter, for greater
     * client compatibility.
     *
     * @param instid [required] The ID of the institution.
     * @param attrid [required] The ID of the attribute to delete.
     * @param commitComment [recommended] A short textual description of
     * the change made (will be visible on the history tab in the web
     * application).
     *
     * @return {@code true} if the attribute was deleted by this method, or
     * {@code false} if it did not exist.
     */</doc>
                    <request>
                        <param name="commitComment" style="query" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="text/plain"/>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
                <method id="getAttribute" name="GET" resultField="attribute:IbisAttribute">
                    <doc>
    /**
     * Get a specific attribute of an institution.
     *
     * @param instid [required] The ID of the institution.
     * @param attrid [required] The ID of the attribute to fetch.
     *
     * @return The requested attribute.
     */</doc>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
                <method id="updateAttribute" name="PUT" resultField="attribute:IbisAttribute">
                    <doc>
    /**
     * Update an attribute of an institution.
     * &lt;p&gt;
     * The attribute's value, binaryData, comment and effective date fields
     * will all be updated using the data supplied. All other fields will be
     * left unchanged.
     * &lt;p&gt;
     * To avoid inadvertently changing fields of the attribute, it is
     * recommended that {@link #getAttribute getAttribute()} be used to
     * retrieve the current value of the attribute, before calling this
     * method with the required changes.
     *
     * @param instid [required] The ID of the institution.
     * @param attrid [required] The ID of the attribute to update.
     * @param attr [required] The new attribute values to apply.
     * @param commitComment [recommended] A short textual description of
     * the change made (will be visible on the history tab in the web
     * application).
     *
     * @return The updated attribute.
     */</doc>
                    <request>
                        <representation mediaType="application/x-www-form-urlencoded">
                            <param name="attr" style="query" type="xs:string" javaType="uk.ac.cam.ucs.ibis.dto.IbisAttribute" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                            <param name="commitComment" style="query" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        </representation>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
        </resource>
        <resource path="/api/v1/person/" className="PersonResource">
            <doc>
/**
 * Methods for querying and manipulating people.
 *
 * &lt;h4&gt;Notes on the fetch parameter&lt;/h4&gt;
 * &lt;p&gt;
 * All methods that return people, institutions or groups also accept an
 * optional &lt;code&gt;fetch&lt;/code&gt; parameter that may be used to request
 * additional information about the entities returned. Without this
 * parameter, only a few basic details about each person, institution or
 * group are returned. The &lt;code&gt;fetch&lt;/code&gt; parameter is quite flexible,
 * and may be used in a number of different ways:
 *
 * &lt;ul&gt;
 * &lt;li&gt;
 * &lt;b&gt;Attribute fetching&lt;/b&gt;. Attributes may be fetched by specifying the
 * &lt;code&gt;schemeid&lt;/code&gt; of an attribute scheme. For example to fetch a
 * person's email addresses, use the value {@code "email"}. For people common
 * attribute schemes include {@code "jpegPhoto"}, {@code "misAffiliation"},
 * {@code "title"}, {@code "universityPhone"}, {@code "mobexPhone"},
 * {@code "landlinePhone"}, {@code "mobilePhone"}, {@code "pager"},
 * {@code "labeledURI"} and {@code "address"}. The full list of person
 * attribute schemes may be obtained using {@link #allAttributeSchemes}.
 * &lt;br/&gt;&lt;br/&gt;
 * &lt;/li&gt;
 *
 * &lt;li&gt;
 * &lt;b&gt;Pseudo-attributes&lt;/b&gt;. Certain special pseudo-attributes are defined
 * for convenience. For people, the following pseudo-attributes are supported:
 * &lt;ul&gt;
 * &lt;li&gt;{@code "phone_numbers"} - fetches all phone numbers. This is
 * equivalent to
 * {@code "universityPhone,instPhone,mobexPhone,landlinePhone,mobilePhone,pager"}.&lt;/li&gt;
 * &lt;li&gt;{@code "all_identifiers"} - fetches all identifiers. Currently people
 * only have CRSid identifiers, but in the future additional identifiers such
 * as USN or staffNumber may be added.&lt;/li&gt;
 * &lt;li&gt;{@code "all_attrs"} - fetches all attributes from all person attribute
 * schemes. This does not include identifiers or references.&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;br/&gt;&lt;br/&gt;
 * &lt;/li&gt;
 *
 * &lt;li&gt;
 * &lt;b&gt;Reference fetching&lt;/b&gt;. For people, the following references are
 * supported (and will fetch only non-cancelled institutions and groups):
 * &lt;ul&gt;
 * &lt;li&gt;{@code "all_insts"} - fetches all the institutions to which the person
 * belongs (sorted in name order).&lt;/li&gt;
 * &lt;li&gt;{@code "all_groups"} - fetches all the groups that the person is a
 * member of, including indirect group memberships, via groups that include
 * other groups.&lt;/li&gt;
 * &lt;li&gt;{@code "direct_groups"} - fetches all the groups that the person is
 * directly a member of. This does not include indirect group memberships -
 * i.e., groups that include these groups.&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;br/&gt;&lt;br/&gt;
 * &lt;/li&gt;
 *
 * &lt;li&gt;
 * &lt;b&gt;Chained reference fetching&lt;/b&gt;. To fetch properties of referenced
 * objects, the "dot" notation may be used. For example, to fetch the email
 * addresses of all the institutions to which a person belongs, use
 * {@code "all_insts.email"}. Chains may include a number of reference
 * following steps, for example
 * {@code "all_insts.managed_by_groups.all_members.email"} will fetch all the
 * institutions to which the person belongs, all the groups that manage those
 * institutions, all the visible members of those groups and all the email
 * addresses of those managing group members. For more information about what
 * can be fetched from referenced institutions and groups, refer to the
 * documentation for {@link InstitutionMethods} and {@link GroupMethods}.
 * &lt;/li&gt;
 * &lt;/ul&gt;
 *
 * &lt;p&gt;
 * Multiple values of the &lt;code&gt;fetch&lt;/code&gt; parameter should be separated
 * by commas.
 *
 * &lt;h4&gt;Fetch parameter examples&lt;/h4&gt;
 * &lt;p&gt;
 * &lt;code&gt;fetch = "email"&lt;/code&gt;&lt;br/&gt;
 * This fetches all the person's email addresses.
 * &lt;p&gt;
 * &lt;code&gt;fetch = "title,address"&lt;/code&gt;&lt;br/&gt;
 * This fetches all the person's titles (roles) and addresses.
 * &lt;p&gt;
 * &lt;code&gt;fetch = "all_attrs"&lt;/code&gt;&lt;br/&gt;
 * This fetches all the person's attributes.
 * &lt;p&gt;
 * &lt;code&gt;fetch = "all_groups,all_insts"&lt;/code&gt;&lt;br/&gt;
 * This fetches all the groups and institutions to which the person belongs.
 * &lt;p&gt;
 * &lt;code&gt;fetch = "all_insts.parent_insts"&lt;/code&gt;&lt;br/&gt;
 * This fetches all the person's institutions, and their parent institutions.
 * &lt;p&gt;
 * &lt;code&gt;fetch = "all_insts.email,all_insts.all_members.email"&lt;/code&gt;&lt;br/&gt;
 * This fetches all the person's institutions and their email addresses, and
 * all the members of those institutions, and the email addresses of all
 * those members.
 *
 * @author Dean Rasheed (dev-group@ucs.cam.ac.uk)
 */</doc>
            <resource path="all-attr-schemes">
                <method id="allAttributeSchemes" name="GET" resultField="attributeSchemes:java.util.List&lt;IbisAttributeScheme&gt;">
                    <doc>
    /**
     * Return a list of all the person attribute schemes available. The
     * {@code schemeid} values of these schemes may be used in the
     * &lt;code&gt;fetch&lt;/code&gt; parameter of other methods that return people.
     * &lt;p&gt;
     * NOTE: Some of these attribute schemes are not currently used (no
     * people have attribute values in the scheme). These schemes are
     * reserved for possible future use.
     *
     * @return All the available person attribute schemes (in precedence
     * order).
     */</doc>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="all-people">
                <method id="allPeople" name="GET" resultField="people:java.util.List&lt;IbisPerson&gt;">
                    <doc>
    /**
     * Return a list of all people (in batches).
     * &lt;p&gt;
     * The results are sorted by identifier, starting with the first person
     * after the person with the specified identifier. Thus, to iterate over
     * all people, pass a {@code null} identifier to get the first batch of
     * people, then pass the last identifier from the previous batch to get
     * the next batch, and repeat until no more people are returned.
     * &lt;p&gt;
     * By default, only a few basic details about each person are returned,
     * but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used to fetch
     * additional attributes or references.
     *
     * @param includeCancelled [optional] Flag to allow cancelled people to
     * be included (people who are no longer members of the University).
     * Defaults to {@code false}.
     * @param identifier [optional] The identifier (CRSid) of the person to
     * start after, or {@code null} to start from the first person.
     * @param limit [optional] The maximum number of people to return.
     * Defaults to 100.
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch.
     *
     * @return The requested people (in identifier order).
     */</doc>
                    <request>
                        <param name="includeCancelled" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="identifier" style="query" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="limit" style="query" type="xs:int" javaType="int" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="list">
                <method id="listPeople" name="GET" resultField="people:java.util.List&lt;IbisPerson&gt;">
                    <doc>
    /**
     * Get the people with the specified identifiers (typically CRSids).
     * &lt;p&gt;
     * Each identifier may be either a CRSid, or an identifier from another
     * identifier scheme, prefixed with that scheme's name and a slash. For
     * example {@code "mug99"} or {@code "usn/123456789"}.
     * &lt;p&gt;
     * By default, only a few basic details about each person are returned,
     * but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used to fetch
     * additional attributes or references.
     * &lt;p&gt;
     * The results are sorted by identifier scheme and value.
     * &lt;p&gt;
     * NOTE: The number of people that may be fetched in a single call is
     * limited by the URL path length limit (around 8000 characters). A
     * CRSid is up to 7 characters long, and other identifiers are typically
     * longer, since they must also include the identifier scheme. Thus the
     * number of people that this method may fetch is typically limited to a
     * few hundred.
     * &lt;p&gt;
     * NOTE: The people returned may include cancelled people. It is the
     * caller's repsonsibility to check their cancelled flags.
     *
     * @param crsids [required] A comma-separated list of identifiers.
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch.
     *
     * @return The requested people (in identifier order).
     */</doc>
                    <request>
                        <param name="crsids" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="modified-people">
                <method id="modifiedPeople" name="GET" resultField="people:java.util.List&lt;IbisPerson&gt;">
                    <doc>
    /**
     * Find all people modified between the specified pair of transactions.
     * &lt;p&gt;
     * The transaction IDs specified should be the IDs from two different
     * requests for the last (most recent) transaction ID, made at different
     * times, that returned different values, indicating that some Lookup
     * data was modified in the period between the two requests. This method
     * then determines which (if any) people were affected.
     * &lt;p&gt;
     * By default, only a few basic details about each person are returned,
     * but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used to fetch
     * additional attributes or references.
     * &lt;p&gt;
     * NOTE: All data returned reflects the latest available data about each
     * person. It is not possible to query for old data, or more detailed
     * information about the specific changes made.
     *
     * @param minTxId [required] Include modifications made in transactions
     * after (but not including) this one.
     * @param maxTxId [required] Include modifications made in transactions
     * up to and including this one.
     * @param crsids [optional] Only include people with identifiers in this
     * list. By default, all modified people will be included.
     * @param includeCancelled  [optional] Include cancelled people (people
     * who are no longer members of the University). By default, cancelled
     * people are excluded.
     * @param membershipChanges [optional] Include people whose group or
     * institutional memberships have changed. By default, only people whose
     * attributes have been directly modified are included.
     * @param instNameChanges [optional] Include people who are members of
     * instituions whose names have changed. This will also cause people
     * whose group or institutional memberships have changed to be included.
     * By default, changes to institution names do not propagate to people.
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch.
     *
     * @return The modified people (in identifier order).
     */</doc>
                    <request>
                        <param name="minTxId" style="query" type="xs:long" javaType="long" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="maxTxId" style="query" type="xs:long" javaType="long" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="crsids" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="includeCancelled" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="membershipChanges" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="instNameChanges" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="search">
                <method id="search" name="GET" resultField="people:java.util.List&lt;IbisPerson&gt;">
                    <doc>
    /**
     * Search for people using a free text query string. This is the same
     * search function that is used in the Lookup web application.
     * &lt;p&gt;
     * By default, only a few basic details about each person are returned,
     * but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used to fetch
     * additional attributes or references.
     * &lt;p&gt;
     * NOTE: If the query string starts with the prefix {@code "person:"}, it
     * is treated as an &lt;a href="/lql" target="_top"&gt;LQL query&lt;/a&gt;, allowing
     * more advanced searches. An LQL query will ignore the
     * &lt;code&gt;approxMatches&lt;/code&gt; and &lt;code&gt;attributes&lt;/code&gt; parameters, but
     * it will respect the values of &lt;code&gt;includeCancelled&lt;/code&gt; and
     * &lt;code&gt;misStatus&lt;/code&gt;. In addition, an LQL query will ignore the
     * &lt;code&gt;orderBy&lt;/code&gt; parameter, since LQL queries always return
     * results in ID order.
     *
     * @param query [required] The search string.
     * @param approxMatches [optional] Flag to enable more approximate
     * matching in the search, causing more results to be returned. Defaults
     * to {@code false}. This is ignored for LQL queries.
     * @param includeCancelled [optional] Flag to allow cancelled people to
     * be included (people who are no longer members of the University).
     * Defaults to {@code false}.
     * @param misStatus [optional] The type of people to search for. This may
     * be
     * &lt;ul&gt;
     * &lt;li&gt;{@code "staff"} - only include people whose MIS status is
     * {@code ""} (empty string), {@code "staff"}, or
     * {@code "staff,student"}.&lt;/li&gt;
     * &lt;li&gt;{@code "student"} - only include people whose MIS status is set to
     * {@code "student"} or {@code "staff,student"}.&lt;/li&gt;
     * &lt;/ul&gt;
     * Otherwise all matching people will be included (the default). Note
     * that the {@code "staff"} and {@code "student"} options are not
     * mutually exclusive.
     * @param attributes [optional] A comma-separated list of attributes to
     * consider when searching. If this is {@code null} (the default) then
     * all attribute schemes marked as searchable will be included. This is
     * ignored for LQL queries.
     * @param offset [optional] The number of results to skip at the start
     * of the search. Defaults to 0.
     * @param limit [optional] The maximum number of results to return.
     * Defaults to 100.
     * @param orderBy [optional] The order in which to list the results.
     * This may be either {@code "identifier"} or {@code "surname"} (the
     * default for non-LQL queries). This is ignored for LQL queries, which
     * always return results in identifier order.
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch.
     *
     * @return The matching people.
     */</doc>
                    <request>
                        <param name="query" style="query" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="approxMatches" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="includeCancelled" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="misStatus" style="query" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="attributes" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="offset" style="query" type="xs:int" javaType="int" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="limit" style="query" type="xs:int" javaType="int" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="orderBy" style="query" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="search-count">
                <method id="searchCount" name="GET" resultField="value:int">
                    <doc>
    /**
     * Count the number of people that would be returned by a search using
     * a free text query string.
     * &lt;p&gt;
     * NOTE: If the query string starts with the prefix {@code "person:"}, it
     * is treated as an &lt;a href="/lql" target="_top"&gt;LQL query&lt;/a&gt;, allowing
     * more advanced searches. An LQL query will ignore the
     * &lt;code&gt;approxMatches&lt;/code&gt; and &lt;code&gt;attributes&lt;/code&gt; parameters, but
     * it will respect the values of &lt;code&gt;includeCancelled&lt;/code&gt; and
     * &lt;code&gt;misStatus&lt;/code&gt;.
     *
     * @param query [required] The search string.
     * @param approxMatches [optional] Flag to enable more approximate
     * matching in the search, causing more results to be returned. Defaults
     * to {@code false}. This is ignored for LQL queries.
     * @param includeCancelled [optional] Flag to allow cancelled people to
     * be included (people who are no longer members of the University).
     * Defaults to {@code false}.
     * @param misStatus [optional] The type of people to search for. This may
     * be
     * &lt;ul&gt;
     * &lt;li&gt;{@code "staff"} - only include people whose MIS status is
     * {@code ""} (empty string), {@code "staff"}, or
     * {@code "staff,student"}.&lt;/li&gt;
     * &lt;li&gt;{@code "student"} - only include people whose MIS status is set to
     * {@code "student"} or {@code "staff,student"}.&lt;/li&gt;
     * &lt;/ul&gt;
     * Otherwise all matching people will be included (the default). Note
     * that the {@code "staff"} and {@code "student"} options are not
     * mutually exclusive.
     * @param attributes [optional] A comma-separated list of attributes to
     * consider when searching. If this is {@code null} (the default) then
     * all attribute schemes marked as searchable will be included. This is
     * ignored for LQL queries.
     *
     * @return The number of matching people.
     */</doc>
                    <request>
                        <param name="query" style="query" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="approxMatches" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="includeCancelled" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="misStatus" style="query" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <param name="attributes" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="text/plain"/>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="{scheme}/{identifier}">
                <param name="scheme" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="identifier" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <method id="getPerson" name="GET" resultField="person:IbisPerson">
                    <doc>
    /**
     * Get the person with the specified identifier.
     * &lt;p&gt;
     * By default, only a few basic details about the person are returned,
     * but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used to fetch
     * additional attributes or references of the person.
     * &lt;p&gt;
     * NOTE: The person returned may be a cancelled person. It is the
     * caller's repsonsibility to check its cancelled flag.
     *
     * @param scheme [required] The person identifier scheme. Typically this
     * should be {@code "crsid"}, but other identifier schemes may be
     * available in the future, such as {@code "usn"} or
     * {@code "staffNumber"}.
     * @param identifier [required] The identifier of the person to fetch
     * (typically their CRSid).
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch.
     *
     * @return The requested person or {@code null} if they were not found.
     */</doc>
                    <request>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="{scheme}/{identifier}/add-attribute">
                <param name="scheme" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="identifier" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <method id="addAttribute" name="POST" resultField="attribute:IbisAttribute">
                    <doc>
    /**
     * Add an attribute to a person. By default, this will not add the
     * attribute again if it already exists.
     * &lt;p&gt;
     * When adding an attribute, the new attribute's scheme must be set.
     * In addition, either its value or its binaryData field should be set.
     * All the remaining fields of the attribute are optional.
     *
     * @param scheme [required] The person identifier scheme. Typically this
     * should be {@code "crsid"}, but other identifier schemes may be
     * available in the future, such as {@code "usn"} or
     * {@code "staffNumber"}.
     * @param identifier [required] The identifier of the person to udpate
     * (typically their CRSid).
     * @param attr [required] The new attribute to add.
     * @param position [optional] The position of the new attribute in the
     * list of attributes of the same attribute scheme (1, 2, 3,...). A value
     * of 0 (the default) will cause the new attribute to be added to the end
     * of the list of existing attributes for the scheme.
     * @param allowDuplicates [optional] If {@code true}, the new attribute
     * will always be added, even if another identical attribute already
     * exists. If {@code false} (the default), the new attribute will only be
     * added if it doesn't already exist.
     * @param commitComment [recommended] A short textual description of
     * the change made (will be visible on the history tab in the web
     * application).
     *
     * @return The newly created or existing attribute.
     */</doc>
                    <request>
                        <representation mediaType="application/x-www-form-urlencoded">
                            <param name="attr" style="query" type="xs:string" javaType="uk.ac.cam.ucs.ibis.dto.IbisAttribute" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                            <param name="position" style="query" type="xs:int" javaType="int" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                            <param name="allowDuplicates" style="query" type="xs:boolean" javaType="boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                            <param name="commitComment" style="query" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        </representation>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="{scheme}/{identifier}/get-attributes">
                <param name="scheme" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="identifier" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <method id="getAttributes" name="GET" resultField="attributes:java.util.List&lt;IbisAttribute&gt;">
                    <doc>
    /**
     * Get one or more (possibly multi-valued) attributes of a person. The
     * returned attributes are sorted by attribute scheme precedence and
     * then attribute precedence.
     *
     * @param scheme [required] The person identifier scheme. Typically this
     * should be {@code "crsid"}, but other identifier schemes may be
     * available in the future, such as {@code "usn"} or
     * {@code "staffNumber"}.
     * @param identifier [required] The identifier of the person (typically
     * their CRSid).
     * @param attrs [required] The attribute scheme(s) to fetch. This may
     * include any number of the attributes or pseudo-attributes, but it
     * may not include references or attribute chains (see the documentation
     * for the {@code fetch} parameter in this class).
     *
     * @return The requested attributes.
     */</doc>
                    <request>
                        <param name="attrs" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="{scheme}/{identifier}/groups">
                <param name="scheme" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="identifier" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <method id="getGroups" name="GET" resultField="groups:java.util.List&lt;IbisGroup&gt;">
                    <doc>
    /**
     * Get all the groups to which the specified person belongs, including
     * indirect group memberships, via groups that include other groups.
     * The returned list of groups is sorted by groupid.
     * &lt;p&gt;
     * Note that some group memberships may not be visible to you. This
     * method will only return those group memberships that you have
     * permission to see.
     * &lt;p&gt;
     * By default, only a few basic details about each group are returned,
     * but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used to fetch
     * additional attributes or references of each group.
     * &lt;p&gt;
     * NOTE: This method will not include cancelled groups.
     *
     * @param scheme [required] The person identifier scheme. Typically this
     * should be {@code "crsid"}, but other identifier schemes may be
     * available in the future, such as {@code "usn"} or
     * {@code "staffNumber"}.
     * @param identifier [required] The identifier of the person (typically
     * their CRSid).
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch.
     *
     * @return The person's groups (in groupid order).
     */</doc>
                    <request>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="{scheme}/{identifier}/insts">
                <param name="scheme" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="identifier" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <method id="getInsts" name="GET" resultField="institutions:java.util.List&lt;IbisInstitution&gt;">
                    <doc>
    /**
     * Get all the institutions to which the specified person belongs. The
     * returned list of institutions is sorted by name.
     * &lt;p&gt;
     * By default, only a few basic details about each institution are
     * returned, but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used
     * to fetch additional attributes or references of each institution.
     * &lt;p&gt;
     * NOTE: This method will not include cancelled institutions.
     *
     * @param scheme [required] The person identifier scheme. Typically this
     * should be {@code "crsid"}, but other identifier schemes may be
     * available in the future, such as {@code "usn"} or
     * {@code "staffNumber"}.
     * @param identifier [required] The identifier of the person (typically
     * their CRSid).
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch.
     *
     * @return The person's institutions (in name order).
     */</doc>
                    <request>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="{scheme}/{identifier}/is-member-of-group/{groupid}">
                <param name="scheme" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="identifier" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="groupid" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <method id="isMemberOfGroup" name="GET" resultField="value:boolean">
                    <doc>
    /**
     * Test if the specified person is a member of the specified group.
     * &lt;p&gt;
     * NOTE: This may be used with cancelled people and groups.
     *
     * @param scheme [required] The person identifier scheme. Typically this
     * should be {@code "crsid"}, but other identifier schemes may be
     * available in the future, such as {@code "usn"} or
     * {@code "staffNumber"}.
     * @param identifier [required] The identifier of the person (typically
     * their CRSid).
     * @param groupid [required] The ID or name of the group.
     *
     * @return {@code true} if the specified person is in the specified
     * group, {@code false} otherwise (or if the person or group does not
     * exist).
     */</doc>
                    <response>
                        <representation mediaType="text/plain"/>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="{scheme}/{identifier}/is-member-of-inst/{instid}">
                <param name="scheme" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="identifier" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="instid" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <method id="isMemberOfInst" name="GET" resultField="value:boolean">
                    <doc>
    /**
     * Test if the specified person is a member of the specified institution.
     * &lt;p&gt;
     * NOTE: This may be used with cancelled people and institutions, but
     * it will not include cancelled membership groups.
     *
     * @param scheme [required] The person identifier scheme. Typically this
     * should be {@code "crsid"}, but other identifier schemes may be
     * available in the future, such as {@code "usn"} or
     * {@code "staffNumber"}.
     * @param identifier [required] The identifier of the person (typically
     * their CRSid).
     * @param instid [required] The ID of the institution.
     *
     * @return {@code true} if the specified person is in the specified
     * institution, {@code false} otherwise (or if the person or institution
     * does not exist).
     */</doc>
                    <response>
                        <representation mediaType="text/plain"/>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="{scheme}/{identifier}/manages-groups">
                <param name="scheme" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="identifier" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <method id="getManagedGroups" name="GET" resultField="groups:java.util.List&lt;IbisGroup&gt;">
                    <doc>
    /**
     * Get all the groups that the specified person has persmission to edit.
     * The returned list of groups is sorted by groupid.
     * &lt;p&gt;
     * Note that some group memberships may not be visible to you. This
     * method will only include groups for which you have persmission to
     * see the applicable manager group memberships.
     * &lt;p&gt;
     * By default, only a few basic details about each group are returned,
     * but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used to fetch
     * additional attributes or references of each group.
     * &lt;p&gt;
     * NOTE: This method will not include cancelled groups.
     *
     * @param scheme [required] The person identifier scheme. Typically this
     * should be {@code "crsid"}, but other identifier schemes may be
     * available in the future, such as {@code "usn"} or
     * {@code "staffNumber"}.
     * @param identifier [required] The identifier of the person (typically
     * their CRSid).
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch.
     *
     * @return The groups that the person manages (in groupid order).
     */</doc>
                    <request>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="{scheme}/{identifier}/manages-insts">
                <param name="scheme" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="identifier" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <method id="getManagedInsts" name="GET" resultField="institutions:java.util.List&lt;IbisInstitution&gt;">
                    <doc>
    /**
     * Get all the institutions that the specified person has permission to
     * edit. The returned list of institutions is sorted by name.
     * &lt;p&gt;
     * Note that some group memberships may not be visible to you. This
     * method will only include institutions for which you have permission
     * to see the applicable editor group memberships.
     * &lt;p&gt;
     * By default, only a few basic details about each institution are
     * returned, but the optional &lt;code&gt;fetch&lt;/code&gt; parameter may be used
     * to fetch additional attributes or references of each institution.
     * &lt;p&gt;
     * NOTE: This method will not include cancelled institutions.
     *
     * @param scheme [required] The person identifier scheme. Typically this
     * should be {@code "crsid"}, but other identifier schemes may be
     * available in the future, such as {@code "usn"} or
     * {@code "staffNumber"}.
     * @param identifier [required] The identifier of the person (typically
     * their CRSid).
     * @param fetch [optional] A comma-separated list of any additional
     * attributes or references to fetch.
     *
     * @return The institutions that the person manages (in name order).
     */</doc>
                    <request>
                        <param name="fetch" style="query" type="xs:string" javaType="java.util.List" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
            <resource path="{scheme}/{identifier}/{attrid}">
                <param name="scheme" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="identifier" style="template" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <param name="attrid" style="template" type="xs:long" javaType="java.lang.Long" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <method id="deleteAttribute" name="DELETE" resultField="value:boolean">
                    <doc>
    /**
     * Delete an attribute of a person. It is not an error if the attribute
     * does not exist.
     * &lt;p&gt;
     * Note that in this method, the &lt;code&gt;commitComment&lt;/code&gt; is passed
     * as a query parameter, rather than as a form parameter, for greater
     * client compatibility.
     *
     * @param scheme [required] The person identifier scheme. Typically this
     * should be {@code "crsid"}, but other identifier schemes may be
     * available in the future, such as {@code "usn"} or
     * {@code "staffNumber"}.
     * @param identifier [required] The identifier of the person to udpate
     * (typically their CRSid).
     * @param attrid [required] The ID of the attribute to delete.
     * @param commitComment [recommended] A short textual description of
     * the change made (will be visible on the history tab in the web
     * application).
     *
     * @return {@code true} if the attribute was deleted by this method, or
     * {@code false} if it did not exist.
     */</doc>
                    <request>
                        <param name="commitComment" style="query" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </request>
                    <response>
                        <representation mediaType="text/plain"/>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
                <method id="getAttribute" name="GET" resultField="attribute:IbisAttribute">
                    <doc>
    /**
     * Get a specific attribute of a person.
     *
     * @param scheme [required] The person identifier scheme. Typically this
     * should be {@code "crsid"}, but other identifier schemes may be
     * available in the future, such as {@code "usn"} or
     * {@code "staffNumber"}.
     * @param identifier [required] The identifier of the person (typically
     * their CRSid).
     * @param attrid [required] The ID of the attribute to fetch.
     *
     * @return The requested attribute.
     */</doc>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
                <method id="updateAttribute" name="PUT" resultField="attribute:IbisAttribute">
                    <doc>
    /**
     * Update an attribute of a person.
     * &lt;p&gt;
     * The attribute's value, binaryData, comment, instid and effective date
     * fields will all be updated using the data supplied. All other fields
     * will be left unchanged.
     * &lt;p&gt;
     * To avoid inadvertently changing fields of the attribute, it is
     * recommended that {@link #getAttribute getAttribute()} be used to
     * retrieve the current value of the attribute, before calling this
     * method with the required changes.
     *
     * @param scheme [required] The person identifier scheme. Typically this
     * should be {@code "crsid"}, but other identifier schemes may be
     * available in the future, such as {@code "usn"} or
     * {@code "staffNumber"}.
     * @param identifier [required] The identifier of the person to udpate
     * (typically their CRSid).
     * @param attrid [required] The ID of the attribute to update.
     * @param attr [required] The new attribute values to apply.
     * @param commitComment [recommended] A short textual description of
     * the change made (will be visible on the history tab in the web
     * application).
     *
     * @return The updated attribute.
     */</doc>
                    <request>
                        <representation mediaType="application/x-www-form-urlencoded">
                            <param name="attr" style="query" type="xs:string" javaType="uk.ac.cam.ucs.ibis.dto.IbisAttribute" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                            <param name="commitComment" style="query" type="xs:string" javaType="java.lang.String" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        </representation>
                    </request>
                    <response>
                        <representation mediaType="application/xml"/>
                        <representation mediaType="application/json"/>
                        <representation mediaType="text/xml"/>
                        <representation mediaType="text/x-json"/>
                    </response>
                </method>
            </resource>
        </resource>
    </resources>
</application>
